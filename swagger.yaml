openapi: 3.0.3
info:
  title: Library
  description: Create list of books, get books with authors.
  version: 1.0.0
servers:
  - url: https://mylibrary-e460551407b2.herokuapp.com/api/
tags:
  - name: Registration
    description: You can register here
  - name: Book
    description: Everything about books
  - name: Author
    description: Everything about authors
  - name: Order
    description: You can order book
paths:
  /order/:
    post:
      tags:
        - Order
      summary: Order book
      description: You can order the book
      requestBody:
        description: Create order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              "Buy book":
                value:
                  order:
                    [{"book_id": 2, "quantity": 3}]
              "Buy book with id 5 with quantity 10 and with id 14 with quantity 3":
                value:
                  order:
                    [{"book_id": 5, "quantity": 10}, [{"book_id": 14, "quantity": 3}]]
      responses:
        '200':
          description: Order create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
  /register/:
    post:
      tags:
        - Registration
      summary: Registration
      description: You can register here
      requestBody:
        description: Create account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gettoken'
        '400':
          description: Username already exists.
  /books/:
    get:
      tags:
        - Book
      summary: List of books
      description: Get all books
      parameters:
        - in: query
          name: title
          description: Filter books by title
          schema:
            type: string
        - in: query
          name: author
          description: Filter books by author's name
          schema:
            type: string
        - in: query
          name: genre
          description: Filter books by genre
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookWithID'
        '400':
          description: "Username already exists."
    post:
      tags:
        - Book
      summary: Add a new book
      description: Add a new book
      security:
        - TokenAuth: []
      requestBody:
        description: Create a new book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid date format. Use YYYY-MM-DD format or Incomplete data
        '401':
          description: Authentication credentials were not provided
  /books/{id}/:
    put:
      tags:
        - Book
      summary: Update book by ID
      description: Update book by ID
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Update successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: No data to update
        '401':
          description: Authentication credentials were not provided
        '404':
          description: Book not found
    get:
      tags:
        - Book
      summary: Get book by ID
      description: Get book by ID
      parameters:
        - name: id
          in: path
          description: ID of book
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookWithID'
        '404':
          description: Book not found
    delete:
      tags:
        - Book
      summary: Delete book by id
      description: Delete book by id
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          description: ID of book
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book was delete successful
        '401':
          description: Authentication credentials were not provided
        '404':
          description: Book not found
  /authors/:
    get:
      tags:
        - Author
      summary: List of authors
      description: List of authors
      parameters:
        - in: query
          name: name
          description: Filter authors by name
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{id}/:
    get:
      tags:
        - Author
      summary: Get author by id
      description: Get author by id
      parameters:
        - name: id
          in: path
          description: Author by id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description:  Author not found
components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Enter prefix "Token" before token e.g. "Token 5a6ea47ac5470127625ca15967d2b90f7bcf36ba".
  schemas:
    Order:
      type: object
      required:
      - order
      properties:
        order:
          type: array
          items:
            type: object
            required:
            - book_id
            - quantity
            properties:
              book_id:
                type: integer
                example: 5
              quantity:
                type: integer
                example: 8


    OrderResponse:
      type: object
      properties:
        order_id:
          type: integer
          example: 15
    Registration:
      properties:
        username:
          type: string
          example: myusername
        password:
          type: string
          example: password123
    Gettoken:
      properties:
        token:
          type: string
          example: 48a39ba7a03599b367b5c11095d92fbda8903c73
    Book:
      properties:
        title:
          type: string
          example: My book
        author:
          type: string
          example: Oliver
        genre:
          type: string
          example: Fantastic
        publication_date:
          type: string
          format: date
        quantity:
          type: integer
          example: 15
        price:
          type: integer
          example: 10000

    BookWithID:
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: My book
        author:
          type: string
          example: Oliver
        genre:
          type: string
          example: Fantastic
        publication_date:
          type: string
          format: date
        price:
          type: integer
          example: 10000
    Author:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Mike